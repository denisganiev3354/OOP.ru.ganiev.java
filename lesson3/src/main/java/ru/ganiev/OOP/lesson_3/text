Моисеев Кирилл
Администратор
Модифицировать ранее созданный класс СтудентКомпаратор
Переименовать в ЮзерКомпаратор
Типизировать его T наследующегося от типа Юзер
Типизировать реализуемый интерфейс Компаратор T
Изменить метод компаре, внеся во входные данные вместо конкретных классов типизацию T
Внести правки места, где использовался предыдущий компаратор

22:02
Денис Ганиев
по старрому

22:03
Моисеев Кирилл
Администратор
package Comparator;

import java.util.Comparator;

public class StudentComparator implements Comparator<Student3> {
    @Override
    public int compare(Student3 o1, Student3 o2) {
        int resultOfComparing = o1.getSecondName().compareTo(o2.getSecondName());
        if (resultOfComparing == 0) {
            resultOfComparing = o1.getFirstName().compareTo(o2.getFirstName());
            if (resultOfComparing == 0) {
                return o1.getLastName().compareTo(o2.getLastName());
            } else {
                return resultOfComparing;
            }
        } else {
            return resultOfComparing;
        }
    }
}

22:04
Задача 1
� Создать класс Юзер и перенести в него базовые поля ( ФИО )
� Модифицировать ранее созданный класс СтудентКомпаратор
� Переименовать в ЮзерКомпаратор
� Типизировать его T наследующегося от типа Юзер ( T extends User )
� Типизировать реализуемый интерфейс Компаратор T
� Изменить метод компаре, внеся во входные данные вместо конкретных
классов типизацию T
� Внести правки места, где использовался предыдущий компаратор
package ru.gb.oseminar.service;

import ru.gb.oseminar.data.Student;
import ru.gb.oseminar.data.UserComparator;
import ru.gb.oseminar.data.StudentGroup;
import ru.gb.oseminar.data.Teacher;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

public class StudentGroupService {
    private StudentGroup studentGroup;

    public void createStudentGroup(Teacher teacher, List<Student> students) {
        this.studentGroup = new StudentGroup(teacher, students);
    }

    public StudentGroup getStudentGroup() {
        return studentGroup;
    }

    public Student getStudentFromStudentGroup(String firstName, String secondName){
        Iterator<Student> iterator = studentGroup.iterator();
        List<Student> result = new ArrayList<>();
        while (iterator.hasNext()){
            Student student = iterator.next();
            if(student.getFirstName().equalsIgnoreCase(firstName)
               && student.getSecondName().equalsIgnoreCase(secondName)){
                result.add(student);
            }
        }
        if(result.size() == 0){
            throw new IllegalStateException(
                    String.format("Студент с именем %s и фамилией %s не найден", firstName, secondName)
            );
        }
        if(result.size() != 1){
            throw new IllegalStateException("Найдено более одного студента с указанными именем и фамилией");
        }
        return result.get(0);
    }

    public List<Student> getSortedStudentGroup(){
        List<Student> students = new ArrayList<>(studentGroup.getStudents());
        Collections.sort(students);
        return students;
    }

    public List<Student> getSortedByFIOStudentGroup(){
        List<Student> students = new ArrayList<>(studentGroup.getStudents());
        students.sort(new UserComparator<Student>());
        return students;
    }
}
package ru.gb.oseminar.data;

import java.time.LocalDate;
import java.util.Comparator;

public class Teacher extends User{

    private Long teacherId;

    public Teacher(String firstName, String secondName, String patronymic, LocalDate dateOfBirth) {
        super(firstName, secondName, patronymic, dateOfBirth);
    }

    public Long getTeacherId() {
        return teacherId;
    }

    public void setTeacherId(Long teacherId) {
        this.teacherId = teacherId;
    }

    public static class TeacherComparator implements Comparator {
        @Override
        public int compare(Object o1, Object o2) {
            return 0;
        }
    }
}

22:16
Задача 1
� Создать класс Юзер и перенести в него базовые поля ( ФИО )
� Модифицировать ранее созданный класс СтудентКомпаратор
� Переименовать в ЮзерКомпаратор
� Типизировать его T наследующегося от типа Юзер ( T extends User )
� Типизировать реализуемый интерфейс Компаратор T
� Изменить метод компаре, внеся во входные данные вместо конкретных
классов типизацию T
� Внести правки места, где использовался предыдущий компаратор

22:39
Nikita
у меня все нормально подтянулось, без ошибок

22:44
Моисеев Кирилл
Администратор
Задача 2
� Создать интерфейс ЮзерВью
� Типизировать его T наследующегося от типа Юзер
� Создать в нем метод sendOnConsole(List<Student> students) используя
типизацию
� Создать класс СтудентВью реализующий созданный интерфейс

22:49
Задача 3
� Модифицировать ранее созданный класс Контроллер переименовав его в
StudentController
� Создайте новый интерфейс UserController
� Опишите в нем метод create
� Типизировать его T наследующегося от типа Юзер
� В классе СтудентКонтроллер реализуйте интерфейс UserController
� Добавить в методы контроллера вывод в консоль с помощью метода
sendOnConsole
Nikita
package ru.gb.oop.seminario4.data;

import java.util.List;

public class StudentGroup implements Iterable<Student>{
    private List<Student> students;
    private Teacher teacher;

    public StudentGroup(Teacher teacher, List<Student> students) {
        this.students = students;
        this.teacher = teacher;
    }

    public List<Student> getStudents() {
        return students;
    }

    public void setStudents(List<Student> students) {
        this.students = students;
    }

    public Teacher getTeacher() {
        return teacher;
    }

    public void setTeacher(Teacher teacher) {
        this.teacher = teacher;
    }
    public void createStudent(User user){
        students.add((Student) user);
    }
    @Override
    public String toString() {
        return "StudentGroup{" +
               "students=" + students +
               ", teacher=" + teacher +
               '}';
    }

    @Override
    public StudentGroupIterator iterator() {
        return new StudentGroupIterator(this);
    }
}

23:11
Моисеев Кирилл
Администратор
Задача 3
� Модифицировать ранее созданный класс Контроллер переименовав его в
StudentController
� Создайте новый интерфейс UserController
� Опишите в нем метод create
� Типизировать его T наследующегося от типа Юзер
� В классе СтудентКонтроллер реализуйте интерфейс UserController
� Добавить в методы контроллера вывод в консоль с помощью метода
sendOnConsole